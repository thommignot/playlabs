---

- hosts: '{% if prefix is defined %}{{ prefix }}{% else %}django{% endif %}-{{ instance }}'

  vars:
    django_prefix: '{% if prefix is defined %}{{ prefix }}{% else %}django{% endif %}'
    django_instance: '{{ django_prefix }}-{{ instance }}'
    django_admin_password: '{{ hostvars[inventory_hostname][django_prefix + "_" + instance + "_admin_password"] }}'
    django_dns: '{{ hostvars[inventory_hostname][django_prefix + "_" + instance + "_dns"] }}'
    django_home: '/home/{{ django_instance }}/'
    django_backup: '{{ django_home }}backup/'
    django_email: '{{ hostvars[inventory_hostname][django_prefix + "_" + instance + "_email"] }}'
    django_email_from: '{{ hostvars[inventory_hostname].get(django_prefix + "_" + instance + "_email_from", django_prefix + "@exemple.com") }}'
    django_backup_password: '{{ hostvars[inventory_hostname][django_prefix + "_" + instance + "_backup_password"] }}'
    django_htaccess: '{{ hostvars[inventory_hostname].get(django_prefix + "_" + instance + "_htaccess", false) }}'
    django_mailcatcher: '{{ hostvars[inventory_hostname].get(django_prefix + "_" + instance + "_mailcatcher", false) }}'
    django_mailcatcher_env:
      EMAIL_HOST: 'mailcatcher.docker'
      EMAIL_HOST_USER: ''
      EMAIL_HOST_PASSWORD: ''
      EMAIL_PORT: 1025
      EMAIL_USE_TLS: ''
      EMAIL_USE_SSL: ''
    django_log: '{{ django_home }}log'
    django_media: '{{ django_home }}media'
    django_secret_key: '{{ hostvars[inventory_hostname][django_prefix + "_" + instance + "_secret_key"] }}'
    django_sentry_dsn: '{{ hostvars[inventory_hostname].get(django_prefix + "_" + instance + "_sentry_dsn") }}'
    django_postgresql_password: '{{ hostvars[inventory_hostname][django_prefix + "_" + instance + "_postgresql_password"] }}'
    django_postgresql_user: django
    django_postgresql_host: '{{ django_instance }}-postgres'
    django_postgresql_db: '{{ django_instance }}'
    django_env: '{{ hostvars[inventory_hostname].get(django_prefix + "_" + instance + "_env", {}) }}'
    django_env_base:
      LETSENCRYPT_EMAIL: '{{ letsencrypt_email }}'
      LETSENCRYPT_HOST: '{{ django_dns }}'
      VIRTUAL_HOST: '{{ django_dns }}'
      ALLOWED_HOSTS: '{{ django_dns }}'
      DEBUG: ''
      SECRET_KEY: '{{ django_secret_key }}'
      DB_ENGINE: django.db.backends.postgresql
      DB_USER: '{{ django_postgresql_user }}'
      DB_PASSWORD: '{{ django_postgresql_password }}'
      DB_HOST: '{{ django_postgresql_host }}'
      DB_NAME: '{{ django_postgresql_db }}'
      DEFAULT_FROM_EMAIL: '{{ django_email_from }}'
      INSTANCE: '{{ instance }}'
      MEDIA_ROOT: '/media'
      LOG: '/log'
      SENTRY_DSN: '{{ django_sentry_dsn }}'

  tasks:
  - name: Pull django image
    tags: update
    register: django_docker_pull
    async: 300
    docker_image:
      name: '{{ image }}'
      force: yes

  - name: Create django network
    docker_network:
      name: '{{ django_instance }}'

  - name: install restic
    package: name=restic
    become: true
    become_method: sudo
    become_user: root

  - name: Create postgres container
    register: django_postgresql_container
    docker_container:
      name: '{{ django_postgresql_host }}'
      networks:
      - name: '{{ django_instance }}'
      image: postgres:10
      restart_policy: always
      volumes:
      - '{{ django_home }}postgresql/data:/var/lib/postgresql/data'
      - '{{ django_home }}postgresql/run:/var/run/postgresql'
      env:
        POSTGRES_PASSWORD: '{{ django_postgresql_password }}'
        POSTGRES_USER: '{{ django_postgresql_user }}'
        POSTGRES_DB: '{{ django_postgresql_db }}'

  - name: Wait for postgres to be up
    wait_for:
      host: "{{ django_postgresql_container['ansible_facts']['docker_container']['NetworkSettings']['IPAddress'] }}"
      port: 5432
      state: started

  - name: Configure nginx
    become: true
    become_method: sudo
    become_user: root
    copy:
      dest: '{{ nginx_home }}vhosts.d/{{ django_dns }}'
      content: |
        client_max_body_size 10M;
        client_body_buffer_size 10M;

  - name: Create media and log dirs
    become: true
    become_method: sudo
    become_user: root
    with_items: ['{{ django_log }}', '{{ django_media }}']
    file:
      path: '{{ item }}'
      state: directory
      mode: 0700
      owner: 1000
      group: 1000

  - name: Setup mailcatcher configuration
    when: django_mailcatcher
    tags: update
    set_fact:
      django_env: '{{ django_env|combine(django_mailcatcher_env) }}'

  - name: Docker pull image
    async_status: jid={{ django_docker_pull.ansible_job_id }}
    register: job_result
    until: job_result.finished
    retries: 30

  - name: Install django container
    tags: update
    docker_container:
      name: '{{ django_instance }}'
      image: '{{ image }}'
      networks:
      - name: '{{ django_instance }}'
      volumes:
      - '{{ django_media }}:/media'
      - '{{ django_log }}:/log'
      restart: yes
      restart_policy: unless-stopped
      env: '{{ django_env_base|combine(django_env) }}'

  - name: Migrate django database
    tags: [update, migrate]
    shell: docker exec {{ django_instance }} su uwsgi -c "django-admin migrate --noinput"

  - name: Install htaccess
    when: django_htaccess
    tags: users
    vars:
      dns: '{{ django_dns }}'
    include_role:
      name: nginx_htpasswd

  - name: Install backup scripts
    become: true
    become_method: sudo
    become_user: root
    vars:
      unit_name: 'backup-{{ django_instance }}'
      unit_description: '{{ django_instance }} backup'
      script_path: '{{ django_home }}backup.sh'
      script_content: |
        #!/bin/bash -eux
        pushd /home/{{ django_instance }}
        export RESTIC_PASSWORD_FILE=.restic
        export RESTIC_REPOSITORY=restic
        echo {{ django_backup_password }} > $RESTIC_PASSWORD_FILE
        test -d $RESTIC_REPOSITORY || restic init --repo $RESTIC_REPOSITORY
        docker stop {{ django_instance }} {{ django_postgresql_host }}
        restic backup media postgresql/data
        docker start {{ django_postgresql_host }} {{ django_instance }}
        popd
        exit 0

        export FTP_PASSWORD="{{ backup_ftp_password }}"
        mkdir -p {{ django_backup }}
        docker exec {{ django_postgresql_host }} pg_dump -U postgres {{ django_postgresql_db }} &> {{ django_backup }}postgresql.dump
        rsync -avz {{ django_media }} {{ django_backup }}media
        /usr/bin/duplicity \
          --encrypt-key={{ gpg_id }} \
          {{ django_backup }} \
          {{ backup_host }}/django/{{ django_instance }}
      rollback_path: '{{ django_home }}rollback.sh'
      rollback_content: |
        #!/bin/bash -eux
        pushd /home/{{ django_instance }}
        export RESTIC_PASSWORD_FILE=.restic
        export RESTIC_REPOSITORY=restic
        if [ -z "${1-}" ]; then
            restic snapshots
            exit 0
        fi

        docker stop {{ django_instance }} {{ django_postgresql_host }}
        rm -rf media postgresql/.data_before_restore
        restic restore $1 --target restore
        mv postgresql/data postgresql/.data_before_restore
        mv restore/data postgresql
        mv media .media_before_restore
        mv restore/media .
        docker start {{ django_postgresql_host }}
        echo please start container {{ django_instance }} manually when ready

        # lftp -c 'set  ssl:check-hostname false;connect ftp://ns3343885.ip-94-23-251.eu@ftpback-rbx4-43.ovh.net/'

    include_role:
      name: backup

  - name: Create super users
    register: django_createsuperuser
    failed_when: false
    with_items: '{{ active_users }}'
    tags: users
    expect:
      timeout: 30
      command: docker exec -it {{ django_instance }} su uwsgi -c bash -c "django-admin createsuperuser"
      responses:
        'Username': ["{{ item['name'] }}"]
        'Email': ["{{ item['email'] }}"]
        'Password': ["{{ admin_passwords[item['name']] }}", "{{ admin_passwords[item['name']] }}"]
