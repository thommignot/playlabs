---

- name: Install pip for openshift pip module required for k8s_raw ansible module
  delegate_to: localhost
  package:
    name: python-pip
    state: present

- name: Pip install openshift
  delegate_to: localhost
  pip:
    name: openshift
    state: present

- name: Install google apt repo
  include_role:
    name: aptrepo
  vars:
    key_id: '54A647F9048D5688D7DA2ABE6A030B21BA07F4FB'
    key_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    repo: deb [arch=amd64] https://apt.kubernetes.io/ kubernetes-xenial main

- name: Install kubeadm/kubectl/kubelet
  apt:
    name: '{{ k8s_packages }}'
    state: installed
    force: yes

- name: Fixate versions
  with_items: '{{ k8s_packages }}'
  dpkg_selections:
    name: '{{ item }}'
    selection: hold

- name: Setup docker
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }

- name: Restart docker
  service: name=docker state=restarted

- name: Reset Kubernetes component
  shell: kubeadm reset --force
  register: reset_cluster

- name: Configure kubelet --fail-on-swap
  when: k8s_swap
  copy:
    content: KUBELET_EXTRA_ARGS=--fail-swap-on=false
    dest: /etc/default/kubelet

- name: Init Kubernetes cluster
  when: reset_cluster is succeeded
  shell: |
    kubeadm init --service-cidr {{ k8s_service_cidr }} \
                 --kubernetes-version {{ k8s_version }} \
                 --pod-network-cidr {{ k8s_pod_network_cidr }} \
                 --token {{ k8s_token }} \
                 --apiserver-advertise-address {{ k8s_master_ip }} \
                 {% if k8s_swap %}--ignore-preflight-errors Swap{% endif %}
  register: init_cluster

- name: Create Kubernetes config directory
  file:
    path: .kube/
    state: directory

- name: Copy admin.conf to Home directory
  when: init_cluster is succeeded
  copy:
    src: '{{ k8s_admin_config }}'
    dest: '.kube/config'
    owner: '{{ ansible_user|default(ansible_user_id) }}'
    group: '{{ ansible_user|default(ansible_user_id) }}'
    mode: 0755
    remote_src: true

- name: Deploy kubernetes dashboard into cluster
  when: init_cluster is succeeded and k8s_dashboard
  command: |
    kubectl --kubeconfig={{ k8s_admin_config }} \
        apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/aio/deploy/recommended/kubernetes-dashboard.yaml
  register: create_result
  until: create_result.rc == 0
  retries: 5
  delay: 2
  ignore_errors: true
  tags: dashboard

- name: Install your user
  include: user.yml
  vars:
    user:
      name: '{{ lookup("env", "USER") }}'
      roles:
        k8s:
