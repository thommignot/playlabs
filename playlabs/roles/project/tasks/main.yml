---

- include: deploy.yml
- include: vars.yml
- include: home.yml
- include: backup.yml
- include: http.yml

- name: Pull project image
  tags: update
  register: project_docker_pull
  async: 300
  docker_image:
    name: '{{ image }}'
    force: yes

- name: Create project network
  docker_network:
    name: '{{ project_instance }}'

- name: Install service containers
  with_items: '{{ services|default([]) }}'
  include: services/{{ item }}/setup.yml

- name: Docker pull image
  async_status: jid={{ project_docker_pull.ansible_job_id }}
  register: job_result
  until: job_result.finished
  retries: 30

- name: Docker inspect image
  docker_image_facts:
    name: '{{ image }}'
  register: project_image

- debug: msg="project_image['images'][0]['Config']['Env'].get('PLAYLABS', None)"

- name: Stop container if any
  failed_when: false
  docker_container:
    name: '{{ project_instance }}'
    state: stopped

- name: Execute backup
  when: project_backup_password != False
  tags: [update, migrate]
  shell: sudo {{ project_home }}/backup.sh

#
#  - name: Get git commit
#    tags: update, docker-run
#    shell: "docker run {{image}} env | grep GIT_COMMIT | grep -o '[a-f0-9]*' "
#    register: project_commit
#    args:
#      executable: /bin/bash
#
- name: Execute migrate
  when: project_profile|default(False)
  include: 'profiles/{{ profile }}/migrate.yml'

- name: Update docker-run.sh
  tags: update, docker-run
  copy:
    dest: '{{ project_home }}/docker-run.sh'
    mode: 0744
    content: |
      #!/bin/bash -eux
      docker rm -f {{ project_instance }} || echo could not rm container
      docker run -d --name {{ project_instance }} --restart unless-stopped \
          -v {{ project_media }}:/media -v {{ project_log }}:/log -v {{ project_spooler }}:/spooler \
          {% for key, value in project_env.items() %}
          -e {{ key }}='{% if value.replace is defined %}{{ value.replace("'", "\\'") }}{% else %}{{ value }}{% endif %}' \
          {% endfor %}
          {{ image }}
      docker network connect {{ project_instance }} {{ project_instance }}
      {% if 'mailcatcher' in project_env.get('EMAIL_HOST', []) %}
      docker network connect mailcatcher {{ project_instance }}
      {% endif %}

- name: Execute docker-run.sh
  tags: update, docker-run
  shell: bash -eux {{ project_home }}/docker-run.sh

- name: Update users in app if profile supports it
  when: project_profile != False
  include: 'profiles/{{ project_profile }}/users.yml'
