---

- debug: var=project_home
- name: Upload backup script
  notify: backup unit
  copy:
    dest: '{{ script_path }}'
    content: |
      #!/bin/bash
      set -eu
      export RESTIC_PASSWORD_FILE={{ project_home }}/.backup_password
      export backup=""
      set -x
      export RESTIC_REPOSITORY={{ repo }}
      pushd {{ project_home }}
      {{ script_content_pre }}
      restic backup $backup
      {{ script_content_post }}
      popd
    owner: root
    group: root
    mode: 0700

- name: Upload restore script
  when: restore_path is defined
  copy:
    dest: '{{ restore_path }}'
    content: |
      #!/bin/bash
      set -eu
      export RESTIC_PASSWORD_FILE={{ project_home }}/.backup_password
      set -x
      export RESTIC_REPOSITORY={{ repo }}

      if [ -z "${1-}" ]; then
          restic snapshots
          exit 0
      fi

      export restore={{ project_home }}/restore

      if ! [ -d $RESTIC_REPOSITORY ]; then
          echo 'Repository not found ! geting from ftp'
          {% if backup_lftp_dsn|default(False) %}
          lftp -c 'set ssl:check-hostname false;connect {{ backup_lftp_dsn }}; mirror {{ project_home }}/restic'
          {% else %}
          echo 'FTP not available: backup_lftp_dsn inventory variable not set !'
          {% endif %}
      fi

      pushd {{ project_home }}
      {{ restore_content_pre }}
      restic restore $1 --target $restore
      {{ restore_content_post }}
      popd
    owner: root
    group: root
    mode: 0700

- name: Upload prune script
  notify: prune unit
  copy:
    dest: '{{ prune_path }}'
    content: '{{ prune_content }}'
    owner: root
    group: root
    mode: 0700

- name: Upload backup password
  copy:
    dest: '{{ project_home }}.backup_password'
    content: '{{ backup_password }}'
    owner: deploy
    group: root
    mode: 0700

- name: Init restic repository
  register: backup_init
  shell: 'RESTIC_REPOSITORY=restic RESTIC_PASSWORD_FILE=.backup_password restic init --repo {{ project_backup_repo }}'
  args:
    executable: /bin/bash
    creates: '{{ project_backup_repo }}'

- name: Create backup unit
  notify: backup unit
  copy:
    dest: /etc/systemd/system/{{ unit_name }}.service
    content: |
      [Unit]
      Description={{ unit_description }} unit

      [Service]
      ExecStart={{ script_path }}
      Type=oneshot
      StandardOutput=journal

      [Install]
      WantedBy=basic.target

- name: Create backup timer
  notify: backup unit
  copy:
    dest: /etc/systemd/system/{{ unit_name }}.timer
    content: |
      [Unit]
      Description={{ unit_description }} timer

      [Timer]
      OnBootSec=20m
      OnUnitActiveSec=1d

      [Install]
      WantedBy=timers.target

- name: Create prune unit
  notify: backup unit
  copy:
    dest: /etc/systemd/system/{{ unit_name }}.prune.service
    content: |
      [Unit]
      Description=Prune {{ unit_description }} unit

      [Service]
      ExecStart={{ prune_path }}
      Type=oneshot
      StandardOutput=journal

      [Install]
      WantedBy=basic.target

- name: Create prune timer
  register: prune_timer
  when: prune_path is defined
  copy:
    dest: /etc/systemd/system/{{ unit_name }}.prune.timer
    content: |
      [Unit]
      Description=Prune {{ unit_description }} timer

      [Timer]
      OnBootSec=20m
      OnUnitActiveSec=1d

      [Install]
      WantedBy=timers.target

