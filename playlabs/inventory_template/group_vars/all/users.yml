---

users:
- name: hacker
  email: hacker1337@example.pcom
  roles:
    netdata: [sysadmin, domainadmin, dba, webmaster, proxyadmin]
    superuser: [sentry, project-staging]
    # To generate your own crypted password run this command:
    # $ echo -n your vault password > .vault
    # $ ansible-vault --vault-id .vault encrypt_string --name password > group_vars/all/backup_password.yml
  password: !vault |
    $ANSIBLE_VAULT;1.1;AES256
    36656363326438366530326161656232306538333136653237653233353939333330396430326161
    6432376533386534353832373235656631613032323235350a353833653431343930363264393537
    62353330663661663837323033663531616164373231303361313464623161653864613863383264
    3236393263376563640a383636376238333166313835623734656138633530323136326437386530
    38356236646432303430333634373638626262393138363739396263323435306661

# The example inventory provides one deploy user, than has no sudo
# access, but can call the backup script in all services. His ssh
# key is automatically picked up in keys/deploy because playlabs looks
# for keys/$USER. For deploy user, we have a key without password, that
# is supposed to be crypted with ansible-vault before commit:
#
# $ ssh-keygen -t ed25519 -a 100
# $ echo -n your vault password > .vault
# $ ansible-vault encrypt --vault-id .vault keys/deploy
- name: deploy
  sudo: 'ALL=(ALL) NOPASSWD: /home/*/backup.sh'
