---

- name: Create super users
  register: django_createsuperuser
  with_items: '{{ users|default([]) }}'
  tags: users
  when: item['name']|vaulted_password(false) and ('superuser' in item.get('roles', {}).get(project_instance, []) or project_instance in item.get('roles', {}).get('superuser', {}))
  shell: docker exec {{ project_instance }} djcli save settings.AUTH_USER_MODEL username username={{ item['name'] }} email={{ item['email'] }}

- name: Update passwords
  tags: users
  failed_when: false
  with_items: '{{ users|default([]) }}'
  when: item['name']|vaulted_password(false) and ('superuser' in item.get('roles', {}).get(project_instance, []) or project_instance in item.get('roles', {}).get('superuser', {}))
  shell: docker exec {{ project_instance }} djcli chpasswd '{{ item["name"]|vaulted_password }}' username={{ item['name'] }}
  no_log: true

#- name: How many users are in the database ?
#  tags: users
#  shell: docker exec {{ project_instance }} bash -c "echo 'from django.conf import settings; from django.apps import apps; print(apps.get_model(settings.AUTH_USER_MODEL).objects.count())' | django-admin shell"
#  register: django_user_count
#  changed_when: false
#  when: users is not defined or not users

# how could that be too much to maintain
# - name: Generate random password
#   when: not users|default([]) and django_user_count.rc == 0 and django_user_count.stdout == "0"
#   set_fact:
#     random_password: '{{ lookup("password", "/dev/null length=15 chars=ascii_letters) }}'
#
# - name: Create your superuser
#   when: not users|default([]) and django_user_count.rc == 0 and django_user_count.stdout == "0"
#   expect:
#     timeout: 30
#     command: docker exec -it {{ project_instance }} bash -c "django-admin createsuperuser --username {{ lookup('env', 'USER') }} --email {{ lookup('env', 'USER') }}@{{ project_dns }}"
#     responses:
#       'Password': ["{{ random_password }}", "{{ random_password }}"]
#       'Bypass': ["y"]
